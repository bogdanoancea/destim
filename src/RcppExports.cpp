// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// createBCT
Eigen::SparseMatrix<double, Eigen::RowMajor> createBCT(const IntegerMatrix& TL, int S);
RcppExport SEXP _destim_createBCT(SEXP TLSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type TL(TLSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(createBCT(TL, S));
    return rcpp_result_gen;
END_RCPP
}
// updateCTaddtran
Eigen::SparseMatrix<double, Eigen::RowMajor> updateCTaddtran(const SEXP& CT, int newt, int stillt, int sizeCT, IntegerVector tCT);
RcppExport SEXP _destim_updateCTaddtran(SEXP CTSEXP, SEXP newtSEXP, SEXP stilltSEXP, SEXP sizeCTSEXP, SEXP tCTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type CT(CTSEXP);
    Rcpp::traits::input_parameter< int >::type newt(newtSEXP);
    Rcpp::traits::input_parameter< int >::type stillt(stilltSEXP);
    Rcpp::traits::input_parameter< int >::type sizeCT(sizeCTSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tCT(tCTSEXP);
    rcpp_result_gen = Rcpp::wrap(updateCTaddtran(CT, newt, stillt, sizeCT, tCT));
    return rcpp_result_gen;
END_RCPP
}
// createrectangleCT
Eigen::SparseMatrix<double, Eigen::RowMajor> createrectangleCT(const IntegerMatrix& TL, int x, int y);
RcppExport SEXP _destim_createrectangleCT(SEXP TLSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type TL(TLSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(createrectangleCT(TL, x, y));
    return rcpp_result_gen;
END_RCPP
}
// is_sortedTL
bool is_sortedTL(const IntegerMatrix& TL);
RcppExport SEXP _destim_is_sortedTL(SEXP TLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type TL(TLSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sortedTL(TL));
    return rcpp_result_gen;
END_RCPP
}
// orderTL
IntegerVector orderTL(const IntegerMatrix& TL);
RcppExport SEXP _destim_orderTL(SEXP TLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type TL(TLSEXP);
    rcpp_result_gen = Rcpp::wrap(orderTL(TL));
    return rcpp_result_gen;
END_RCPP
}
// findTorder
int findTorder(const IntegerMatrix& TL, const IntegerVector& T);
RcppExport SEXP _destim_findTorder(SEXP TLSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type TL(TLSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(findTorder(TL, T));
    return rcpp_result_gen;
END_RCPP
}
// frbind
Eigen::SparseMatrix<double, Eigen::RowMajor> frbind(Eigen::SparseMatrix<double, Eigen::RowMajor> mat1, Eigen::SparseMatrix<double, Eigen::RowMajor> mat2);
RcppExport SEXP _destim_frbind(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double, Eigen::RowMajor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double, Eigen::RowMajor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(frbind(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// createEQ
Eigen::SparseMatrix<double, Eigen::RowMajor> createEQ(const IntegerVector& tran, const int& ncol);
RcppExport SEXP _destim_createEQ(SEXP tranSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type tran(tranSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(createEQ(tran, ncol));
    return rcpp_result_gen;
END_RCPP
}
// faddconstraint
Eigen::SparseMatrix<double, Eigen::RowMajor> faddconstraint(const IntegerVector& tran, const IntegerMatrix& TL, const SEXP& CT, const IntegerVector& stillt, int S);
RcppExport SEXP _destim_faddconstraint(SEXP tranSEXP, SEXP TLSEXP, SEXP CTSEXP, SEXP stilltSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type tran(tranSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type TL(TLSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type CT(CTSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type stillt(stilltSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(faddconstraint(tran, TL, CT, stillt, S));
    return rcpp_result_gen;
END_RCPP
}
// faddconstraintm
Eigen::SparseMatrix<double, Eigen::RowMajor> faddconstraintm(const SEXP& CT, const SEXP& CTS);
RcppExport SEXP _destim_faddconstraintm(SEXP CTSEXP, SEXP CTSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type CT(CTSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type CTS(CTSSEXP);
    rcpp_result_gen = Rcpp::wrap(faddconstraintm(CT, CTS));
    return rcpp_result_gen;
END_RCPP
}
// createTM
Eigen::SparseMatrix<double, Eigen::RowMajor> createTM(const IntegerMatrix& TL, const NumericVector& transitions, const int& states);
RcppExport SEXP _destim_createTM(SEXP TLSEXP, SEXP transitionsSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type TL(TLSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type transitions(transitionsSEXP);
    Rcpp::traits::input_parameter< const int& >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(createTM(TL, transitions, states));
    return rcpp_result_gen;
END_RCPP
}
// createrectangleTL
IntegerMatrix createrectangleTL(int x, int y);
RcppExport SEXP _destim_createrectangleTL(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(createrectangleTL(x, y));
    return rcpp_result_gen;
END_RCPP
}
// createsteady
NumericVector createsteady(const SEXP& TM);
RcppExport SEXP _destim_createsteady(SEXP TMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type TM(TMSEXP);
    rcpp_result_gen = Rcpp::wrap(createsteady(TM));
    return rcpp_result_gen;
END_RCPP
}
// createsteadypattern
SEXP createsteadypattern(const SEXP& TM);
RcppExport SEXP _destim_createsteadypattern(SEXP TMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type TM(TMSEXP);
    rcpp_result_gen = Rcpp::wrap(createsteadypattern(TM));
    return rcpp_result_gen;
END_RCPP
}
// createsteadyfrompattern
NumericVector createsteadyfrompattern(const SEXP& TM, SEXP ptrn);
RcppExport SEXP _destim_createsteadyfrompattern(SEXP TMSEXP, SEXP ptrnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type TM(TMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrn(ptrnSEXP);
    rcpp_result_gen = Rcpp::wrap(createsteadyfrompattern(TM, ptrn));
    return rcpp_result_gen;
END_RCPP
}
// createtransmatrix
List createtransmatrix(const SEXP& CT);
RcppExport SEXP _destim_createtransmatrix(SEXP CTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type CT(CTSEXP);
    rcpp_result_gen = Rcpp::wrap(createtransmatrix(CT));
    return rcpp_result_gen;
END_RCPP
}
// createlconmatrix
NumericMatrix createlconmatrix(const SEXP& CT);
RcppExport SEXP _destim_createlconmatrix(SEXP CTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type CT(CTSEXP);
    rcpp_result_gen = Rcpp::wrap(createlconmatrix(CT));
    return rcpp_result_gen;
END_RCPP
}
// floglik
double floglik(SEXP& TM, Eigen::Map<Eigen::VectorXd> values, const Eigen::Map<Eigen::VectorXd> rparams, const Eigen::Map<Eigen::MatrixXd> transmatrix, const Eigen::Map<Eigen::VectorXd> init, const SEXP& EM, const IntegerVector& obs);
RcppExport SEXP _destim_floglik(SEXP TMSEXP, SEXP valuesSEXP, SEXP rparamsSEXP, SEXP transmatrixSEXP, SEXP initSEXP, SEXP EMSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type TM(TMSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type rparams(rparamsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type transmatrix(transmatrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type init(initSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type EM(EMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(floglik(TM, values, rparams, transmatrix, init, EM, obs));
    return rcpp_result_gen;
END_RCPP
}
// fforward
List fforward(const SEXP& TM, const Eigen::Map<Eigen::VectorXd> init, const SEXP& EM, const IntegerVector& obs);
RcppExport SEXP _destim_fforward(SEXP TMSEXP, SEXP initSEXP, SEXP EMSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type TM(TMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type init(initSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type EM(EMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(fforward(TM, init, EM, obs));
    return rcpp_result_gen;
END_RCPP
}
// fbackward
Eigen::SparseMatrix<double> fbackward(const SEXP& TM, const SEXP& EM, const IntegerVector& obs, NumericVector sfactors);
RcppExport SEXP _destim_fbackward(SEXP TMSEXP, SEXP EMSEXP, SEXP obsSEXP, SEXP sfactorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type TM(TMSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type EM(EMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sfactors(sfactorsSEXP);
    rcpp_result_gen = Rcpp::wrap(fbackward(TM, EM, obs, sfactors));
    return rcpp_result_gen;
END_RCPP
}
// fscpstates
Eigen::SparseMatrix<double> fscpstates(const SEXP& TM, const SEXP& alpha, const SEXP& beta, const NumericVector& sfactors, const SEXP& EM, const IntegerVector& obs);
RcppExport SEXP _destim_fscpstates(SEXP TMSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sfactorsSEXP, SEXP EMSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type TM(TMSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sfactors(sfactorsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type EM(EMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(fscpstates(TM, alpha, beta, sfactors, EM, obs));
    return rcpp_result_gen;
END_RCPP
}
// cppfunique
NumericMatrix cppfunique(NumericMatrix mat, double tol);
RcppExport SEXP _destim_cppfunique(SEXP matSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cppfunique(mat, tol));
    return rcpp_result_gen;
END_RCPP
}
// cppfuniqueind
IntegerVector cppfuniqueind(NumericMatrix mat, double tol);
RcppExport SEXP _destim_cppfuniqueind(SEXP matSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cppfuniqueind(mat, tol));
    return rcpp_result_gen;
END_RCPP
}
// inittransitions
NumericVector inittransitions(const SEXP& CT);
RcppExport SEXP _destim_inittransitions(SEXP CTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type CT(CTSEXP);
    rcpp_result_gen = Rcpp::wrap(inittransitions(CT));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_destim_createBCT", (DL_FUNC) &_destim_createBCT, 2},
    {"_destim_updateCTaddtran", (DL_FUNC) &_destim_updateCTaddtran, 5},
    {"_destim_createrectangleCT", (DL_FUNC) &_destim_createrectangleCT, 3},
    {"_destim_is_sortedTL", (DL_FUNC) &_destim_is_sortedTL, 1},
    {"_destim_orderTL", (DL_FUNC) &_destim_orderTL, 1},
    {"_destim_findTorder", (DL_FUNC) &_destim_findTorder, 2},
    {"_destim_frbind", (DL_FUNC) &_destim_frbind, 2},
    {"_destim_createEQ", (DL_FUNC) &_destim_createEQ, 2},
    {"_destim_faddconstraint", (DL_FUNC) &_destim_faddconstraint, 5},
    {"_destim_faddconstraintm", (DL_FUNC) &_destim_faddconstraintm, 2},
    {"_destim_createTM", (DL_FUNC) &_destim_createTM, 3},
    {"_destim_createrectangleTL", (DL_FUNC) &_destim_createrectangleTL, 2},
    {"_destim_createsteady", (DL_FUNC) &_destim_createsteady, 1},
    {"_destim_createsteadypattern", (DL_FUNC) &_destim_createsteadypattern, 1},
    {"_destim_createsteadyfrompattern", (DL_FUNC) &_destim_createsteadyfrompattern, 2},
    {"_destim_createtransmatrix", (DL_FUNC) &_destim_createtransmatrix, 1},
    {"_destim_createlconmatrix", (DL_FUNC) &_destim_createlconmatrix, 1},
    {"_destim_floglik", (DL_FUNC) &_destim_floglik, 7},
    {"_destim_fforward", (DL_FUNC) &_destim_fforward, 4},
    {"_destim_fbackward", (DL_FUNC) &_destim_fbackward, 4},
    {"_destim_fscpstates", (DL_FUNC) &_destim_fscpstates, 6},
    {"_destim_cppfunique", (DL_FUNC) &_destim_cppfunique, 2},
    {"_destim_cppfuniqueind", (DL_FUNC) &_destim_cppfuniqueind, 2},
    {"_destim_inittransitions", (DL_FUNC) &_destim_inittransitions, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_destim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
